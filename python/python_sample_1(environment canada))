#in short this script takes satellite data and calculates average run off by stacking 2d arrays into a three day array and then squeezing the three d array to obtain an average run off 2d array.
#Note that this is done  for multiple forecast times

#!/usr/bin/python
# GEPSEnsMean12hAcc.py

# Written by Kapilan Satkunanathan and Dorothy Dunford, September 2017
# based on code by Dorothy Dunford: PlotWatersheds.py
# and Benoit Lapointe: strfw_compare_daily_statsonly.py


#####

# This function performs a verification of mean runoff for each launchtimes simulated using the GEPS forecast
# The analysis and all forecast hours are valid at the same date/time; the start of the forecast is earlier when considering the later forecast hours.
# e.g., when considering 2015110500, the simulated fields considered are:
# forecasts: 2015110500_024_GrLksStLR, 2015110500_048_GrLksStLR, 2015110500_072_GrLksStLR, 2015110500_096_GrLksStLR, 2015110500_120_GrLksStLR, 2015110500_144_GrLksStLR, 2015110500_168_GrLksStLR, 2015110500_192_GrLksStLR, 2015110500_216_GrLksStLR, 2015110500_240_GrLksStLR

#####

# The function is called with the following arguments:
# Compulsory arguments:
# arg1: the start date of the analysis period in the following format yyyymmdd
# arg2: the end date of the analysis period in the following format yyyymmdd
# arg3: path of directory to receive generated files the output files: e.g. /cnfs/dev/cmd/cmde/afsgdod/Maestro/watroute/input/GrLksStLR/constant/geophys/
# arg4: path where GEPS standard files are kept, e.g. GrLksStLR

# To run this script from the command line, open the run_nameofscript.py  using vim:
# insert desired parameters
# make parent script(run_nameofscript.py) executable using chmod u+x 
# to adjust more specific parameters look at the beginning of the script and make adjustments to intial variables if necessary

#####

# Notes:


######################################################################

import csv                                                           # Import modules
import datetime
import os
import string
import sys
import numpy
import shutil
import rpnpy.librmn.all as rmn                                       # For Python RPN v2.0


class FloodPredictorMachine:
    def compare(self, datestr_str, dateend_str, dir_out, in_dir, gridtemplate):
    
        #Intializing some variables
        datestart = datetime.datetime.strptime(datestr_str, "%Y%m%d")# start date
        datecurr = datetime.datetime.strptime(datestr_str, "%Y%m%d") # current date
        dateend = datetime.datetime.strptime(dateend_str, "%Y%m%d")  # end date
        missing_val = -999.999                                       # The missing data value
        acchrs = [24]                                                # The length of the accumulation periods to be processed
        nacchrs = len(acchrs)                                        # size of acculmulation hours 
        accint = [24]                                                # all the acculmulation hours increments  we are going to verify
        syntimes=[0,12]                                              # launch times
        Nsyntimes = len(syntimes)                                    # amount of launchtimes
        Flast = 48                                                  # The last forecast hour to be processed
#        Flast = 240                                                  # The last forecast hour to be processed
        numdates = (((dateend - datestart).days) + 1)                # The number of dates to be processed: Nsyntimes synoptic times per day, including on date_start and date_end
        field = "N0"                                                 # field to read and calculate mean of 
        nmem = 3                                                    # number of members
#        nmem = 20                                                    # number of members
        record = 'X'                                                 # IDK
    
#######

        # Get the field dimensions
        infle = "%04d%02d%02d%02d_%03d_%03d"%(datecurr.year, datecurr.month, datecurr.day, syntimes[0], 24 ,001) # creating the file name to be read from
        inpath = os.path.join(in_dir, infle)                         # join path to directory and name of files we want to open
        fst_rec = self.ReadFld(inpath, field, 24, record)            # Read the data and metadata of the watersheds from the shed file 
        ni = fst_rec['ni']
        nj = fst_rec['nj']

    
        # Check that the directory to receive the output files exists. If it doesn't, create it recursively
        if not os.path.exists(dir_out):
            try:
                os.makedirs(dir_out)
            except:
                print 'The directory to receive the output files does not exist and cannot be created recursively'
                quit()


    
        # Checking if start date is not greater than end date
        if dateend < datestart:
          print 'ERROR: the end date', dateend.strftime("%Y%m%d%H"), 'is earlier than the start date', datestart.strftime("%Y%m%d%H")
          print 'Aborting'
          quit()

###################################

        # Code to calculate mean starts here 
        for accrhrs_index in range(0,nacchrs):                       # loop for each outputs          

            for days in range(0,numdates):                           # loop for number of days

                for launchtimes in range(0,Nsyntimes):               # loop for amount of launch times
                    out_fle="%04d%02d%02d%02d"%(datecurr.year , datecurr.month , datecurr.day  ,syntimes[launchtimes])
                    print '\n', out_fle
                    outpath = os.path.join(dir_out,out_fle)          # creating the standard file format name that is to be written to 
                    oldfld = numpy.zeros([ni,nj], dtype=numpy.float32, order='FORTRAN')

                    for forecast in range(0,Flast+1,accint[accrhrs_index]):  # loop for forecast hour
                        tree_d_array = numpy.zeros([ni,nj], dtype=numpy.float32, order='FORTRAN')

                        for member in range(1,nmem+1):               # loop for ensemble members excludes control member
                            infle = "%04d%02d%02d%02d_%03d_%03d"%(datecurr.year , datecurr.month , datecurr.day  ,syntimes[launchtimes] ,forecast ,member) # creating the file name to be read from
                            print '\n',infle
                            inpath = os.path.join(in_dir, infle)     # join path to directory and name of files we want to open
                            fst_rec = self.ReadFld(inpath, field,forecast,record)  # Read the data and metadata of the watersheds from the shed file 
                            newfld = fst_rec['d']
			    print days,launchtimes,forecast,member,oldfld[177,221], " ",newfld[177,221]
                         #  print '\n',infle,"the following are individual values[200][300] for the member #",member,"contains values ", newfld[200][300] 
			 #   if infle == "2016060212_048_001":
			#	print '\n',"index of 2.45 is:" ,newfld.index(2.45) 
			 #   if infle == "2016060212_048_002":
			#	print '\n',"index of 6.81 is:", newfld.index(6.81) 
			 #   if infle == "2016060212_048_003":
			#	print '\n',"index of 3.74 is:", newfld.index(3.74)  
                            if forecast == 0:
                                oldfld = numpy.add(newfld,oldfld)
                            else:
                                tree_d_array = numpy.add(newfld,tree_d_array)
			print days,launchtimes,forecast,member,oldfld[177,221], " ",newfld[177,221]
                        if forecast == 0:  
			  #  print '\n',"old test b4:", oldfld[200][300]
                            oldfld = oldfld / nmem
			  #  print '\n',"old test after:", oldfld[200][300]
                            shutil.copy2(os.path.join(dir_out, gridtemplate), outpath) # complete target filename given and copy the template grid file to it
                        else:
			 #   print '\n',"old test b4:", oldfld[200][300]
                            newfld = tree_d_array/nmem
			  #  print '\n',"before subtraction", newfld[200][300]
                            newfld = numpy.subtract(newfld,oldfld)
			  #  print '\n',"after subtraction", newfld[200][300]
                            oldfld = newfld
			  #  if out_fle == "2016060212" and forecast == 48:

			#	print '\n',"index of 1.16 is:", zip(*numpy.where(newfld) == 1.16)
                            fst_rec.update({'d':numpy.asfortranarray(newfld),'ip2':forecast, 'ip3':forecast-24}, etiket='ECMEAN__NALL')  
                            self.WriteFld(outpath,fst_rec)
			print days,launchtimes,forecast,member,oldfld[177,221], " ",newfld[177,221]
                datecurr += datetime.timedelta(days=1)               #increment date by one 
                
        print("\nend of main function")
        return None

########### User Defined  Methods ###################################################

    # Write a field
    def WriteFld(self,outfile, outrecord):
        filename = outfile
        if not os.path.isfile(filename):                                 # Check that the output file exists
            print 'The output file was not found:', filename
            quit()
    
        # Open the file
        if not rmn.isFST(filename):                                      # Check that the output file is a standard format file
            raise rmn.FSTDError("Not an FSTD file: %s " % filename)
        try:                                                             # Open the standard format file
            fstID = rmn.fstopenall(filename, rmn.FST_RW_OLD)
            print(fstID)
        except:
            raise rmn.FSTDError("File not found/readable: %s" % filename)

        # Write out the standard format record
        varname = outrecord['nomvar']
        try:
            rmn.fstecr(fstID,outrecord)
        except:
            raise rmn.FSTDError("Problem writing the record " + varname + " to file: %s" % filename)  # Issue a warning message

        rmn.fstcloseall(fstID)                                           # Close the standard format file

        return

######################################################################

    # Read a field
    def ReadFld(self, infile, field, fhr, fst_rec):
        filename = infile
        if not os.path.isfile(filename):                                 # Check that the input file exists
            print 'The input file was not found:', filename
            quit()

        # Open the file
        if not rmn.isFST(filename):                                      # Check that the input file is a standard format file
            raise rmn.FSTDError("Not an FSTD file: %s " % filename)
        try:                                                             # Open the standard format file
            fstID = rmn.fstopenall(filename, rmn.FST_RO)
        except:
            raise rmn.FSTDError("File not found/readable: %s" % filename)

        # Read in the sample field and metadata
        varname = field
        try:
            var_key = rmn.fstinf(fstID, ip2=fhr, nomvar=varname)['key']           # Find the 1st record with the matching name
        except:
            raise rmn.FSTDError("Problem searching for record " + varname + " in file: %s" % filename)  # Issue a warning message
        if var_key:                                                      # Process the current record
            try:
                fst_rec = rmn.fstluk(var_key)                            # Read the record

            except:
                raise rmn.FSTDError("Problem defining grid of file: %s" % filename)

        rmn.fstcloseall(fstID)                                           # Close the standard format file

        return fst_rec

############################################ End of User Defined Methods  #######################################################

if __name__ == '__main__':
    if len(sys.argv) < 6:
        msg = "".join(("You need at least 5 arguments here and provided: {}\n\n",
                       "Correct usage is : {} datestr_str dateend_str dir_out\n\n",
                       "        datestr_str : start date for the verification yyyymmdd\n",
                       "        dateend_str : end date for the verification yyyymmdd\n",
                       "            dir_out : path of directory to receive the generated image\n",
                       "             in_dir : path of directory to standard files\n",
                       "       gridtemplate : template file containing navigation fields of model output\n",
                       ))
        raise TypeError(msg.format(len(sys.argv)-1, sys.argv[0]))
    FloodPredictorMachine().compare(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5])

######################################################################

  

